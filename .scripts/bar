#!/bin/bash

PANEL_FIFO=/tmp/panel-fifo
FONT="curie:size=12"
ICONFONT="FontAwesome:size=10"
WIDTH="1500"
HEIGHT="26"
HORIZONTAL_OFFSET="210"
VERTICAL_OFFSET="0"
PANEL_WM_NAME=bspwm_panel

icon() {
	case $2 in
		0)
			printf "%s" "%{F#5F8972}${1}%{F-}"
			;;

		1)
			printf "%s" "%{F#5F8972}${1}%{F-}"
			;;
	esac
}
# Colors
COLOR_DEFAULT_FG="#A9C4C6"
COLOR_DEFAULT_BG="#101e22" #Green
COLOR_MONITOR_FG="#dee3e0"
COLOR_MONITOR_BG="#101e22"
COLOR_FOCUSED_MONITOR_FG="#A9C4C6"
COLOR_FOCUSED_MONITOR_BG="#528588"
COLOR_FREE_FG="#737171"
COLOR_FREE_BG="#101e22"
COLOR_FOCUSED_FREE_FG="#dee3e0"
COLOR_FOCUSED_FREE_BG="#528588"
COLOR_OCCUPIED_FG="#A9C4C6"
COLOR_OCCUPIED_BG="#101e22"
COLOR_FOCUSED_OCCUPIED_FG="#A9C4C6"
COLOR_FOCUSED_OCCUPIED_BG="#026440"
COLOR_URGENT_FG="#dee3e0"
COLOR_URGENT_BG="#ba5e57"
COLOR_FOCUSED_URGENT_FG="#b48ead"
COLOR_FOCUSED_URGENT_BG="#ba5e57"
COLOR_STATE_FG="#101e22"
COLOR_STATE_BG="#101e22"
COLOR_SYS_FG="#dee3e0"
COLOR_SYS_BG="#101e22"

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

brightness() {
	while true; do
		actual_brightness="$(cat /sys/class/backlight/intel_backlight/actual_brightness)"
		max_brightness="$(cat /sys/class/backlight/intel_backlight/max_brightness)"
		actual_percent="$(($actual_brightness * 100 / $max_brightness))"
		echo 'B' " $actual_percent%"
		sleep 0.1
	done

}

datetime() {
	while true; do
		date +"S%A, %b %d %H:%M"
		sleep 15
	done
}

cpu_temp() {
	while true; do
		cpu_temp="$(sensors | awk '/CPU/ {print substr($2, 2, 7)}')"
		echo 'T' "CPU $cpu_temp"
		sleep 1
	done
}

ipnet() {
	while true; do
		ipnet="$(ip -f inet -o addr show enp2s0 | awk '{print $4}' | sed -r 's/\/.*//')"
		if [ -n "$ipnet" ]; then
			echo -n "$ipnet"
		else
			echo "No connection"
		fi
		sleep 15
	done
}

ipwifi() {
	while true; do
		ipwifi="$(ip -f inet -o addr show wlp3s0 | awk '{print $4}' | sed -r 's/\/.*//')"
		if [ -n "$ipwifi" ]; then
			echo 'F' " $ipwifi"
		else
			return 0
		fi
		sleep 2
	done
}

battery() {
	while true; do
		battery_status="$(cat /sys/class/power_supply/BAT0/status)"
		battery_percent="$(cat /sys/class/power_supply/BAT0/capacity)"

		case "$battery_status" in
			Charging)
				echo 'Z' " ${battery_percent}% ${battery_status}"

				;;

			Discharging)
				if [ "$battery_percent" -gt 80 ]; then
					echo 'Z' " ${battery_percent}% ${battery_status}"
				elif [ "$battery_percent" -gt 60]; then
					echo 'Z' " ${battery_percent}% ${battery_status}"
				elif [ "$battery_percent" -gt 40]; then
					echo 'Z' " ${battery_percent}% ${battery_status}"
				elif [ "$battery_percent" -gt 20]; then
					echo 'Z' " ${battery_percent}% ${battery_status}"
				elif [ "$battery_percent" -gt 0]; then
					echo 'Z' " ${battery_percent}% ${battery_status}"
				fi
				;;

			Unknow|Full)
				echo 'Z' " ${battery_percent}%"
				;;

			esac
			sleep 1;
		done
}

# Make sure that there is no double process running.
killall -9 lemonbar xdo brightness datetime cpu_clock cpu_temp ipnet ipwifi battery

# Echo every module to panel_fifo
brightness > "$PANEL_FIFO" &
datetime > "$PANEL_FIFO" &
cpu_temp > "$PANEL_FIFO" &
#ipnet > "$PANEL_FIFO" &
ipwifi > "$PANEL_FIFO" &
battery > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &
NUM_MON="$(bspc query -M | wc -l)"

bar_wp() {
	while read -r line ; do
		case $line in
			S*)
				# clock output
				sysC="${line#?}"
				;;
			Z*) 
				# battery output
				sysZ="${line#?}"
				;;
			T*)
				# CPU Clock output
				sysT="${line#?}"
				;;

			B*)
				# Backlight output
				sysB="${line#?}"
				;;

			F*)
				# Wifi output
				sysF="${line#?}"
				;;
			
			W*)
				# workspaces output
				wm=
				IFS=':'
				set -- ${line#?}
				while [ $# -gt 0 ] ; do
					item=$1
					name=${item#?}
					case $item in
						[mM]*)
							case $item in
								m*)
									# monitor
									FG=$COLOR_MONITOR_FG
									BG=$COLOR_MONITOR_BG
									on_focused_monitor=
									;;
								M*)
									# focused monitor
									FG=$COLOR_FOCUSED_MONITOR_FG
									BG=$COLOR_FOCUSED_MONITOR_BG
									on_focused_monitor=1
									;;
							esac
							[ $NUM_MON -lt 2 ] && shift && continue
							wm="${wm}%{F${FG}}%{B${BG}}%{A:bspc monitor -f ${name}:} ${name} %{A}%{B-}%{F-}"
							;;
						[fFoOuU]*)
							case $item in
								f*)
									# free desktop
									FG=$COLOR_FREE_FG
									BG=$COLOR_FREE_BG
									UL=$BG
									;;
								F*)
									if [ "$on_focused_monitor" ] ; then
										# focused free desktop
										FG=$COLOR_FOCUSED_FREE_FG
										BG=$COLOR_FOCUSED_FREE_BG
										UL=$BG
									else
										# active free desktop
										FG=$COLOR_FREE_FG
										BG=$COLOR_FREE_BG
										UL=$COLOR_FOCUSED_FREE_BG
									fi
									;;
								o*)
									# occupied desktop
									FG=$COLOR_OCCUPIED_FG
									BG=$COLOR_OCCUPIED_BG
									UL=$BG
									;;
								O*)
									if [ "$on_focused_monitor" ] ; then
										# focused occupied desktop
										FG=$COLOR_FOCUSED_OCCUPIED_FG
										BG=$COLOR_FOCUSED_OCCUPIED_BG
										UL=$BG
									else
										# active occupied desktop
										FG=$COLOR_OCCUPIED_FG
										BG=$COLOR_OCCUPIED_BG
										UL=$COLOR_FOCUSED_OCCUPIED_BG
									fi
									;;
								u*)
									# urgent desktop
									FG=$COLOR_URGENT_FG
									BG=$COLOR_URGENT_BG
									UL=$BG
									;;
								U*)
									if [ "$on_focused_monitor" ] ; then
										# focused urgent desktop
										FG=$COLOR_FOCUSED_URGENT_FG
										BG=$COLOR_FOCUSED_URGENT_BG
										UL=$BG
									else
										# active urgent desktop
										FG=$COLOR_URGENT_FG
										BG=$COLOR_URGENT_BG
										UL=$COLOR_FOCUSED_URGENT_BG
									fi
									;;
							esac
							wm="${wm}%{F${FG}}%{B${BG}}%{U${UL}}%{+u}%{A:bspc desktop -f ${name}:} ${name} %{A}%{B-}%{F-}%{-u}"
							;;
						[LTG]*)
							# layout, state and flags
							wm="${wm}%{F$COLOR_STATE_FG}%{B$COLOR_STATE_BG} ${name} %{B-}%{F-}"
							;;
					esac
					shift
				done
				;;
		esac
		echo -e "%{l} ${wm} %{c}%{F#5F8972} %{F-}${sysC} %{r} ${sysF} ${sysB} ${sysT} ${sysZ} \t"
	done
}

bar_wp < "$PANEL_FIFO" | lemonbar -a 12 \
	-g "$WIDTH"x"$HEIGHT"+"$HORIZONTAL_OFFSET"+"$VERTICAL_OFFSET" \
	-f "$FONT" -f "$ICONFONT" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" -n "$PANEL_WM_NAME" | sh &

sleep 0.5
# Trigger the PANEL_FIFO to make it instantly refreshed after bspwmrc reloaded
echo "dummy" > "$PANEL_FIFO"

sleep 0.5
# Rule the panel to make it hiding below fullscreen window
# I add 'sleep 0.5' to avoid xdo executed before the Lemonbar fully loaded
wid=$(xdo id -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

# Don't close this process
wait
